AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ClusterName:
    Type: String
  VpcCidrBlock:
    Type: String
    Default: "172.31.0.0/16"
  Route53HostedZone:
    Type: String
  Route53HostedZoneId:
    Type: String
  Region:
    Type: String
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
  AmiId:
    Type: 'AWS::EC2::Image::Id'
  BastionNodeUserData:
    Type: String
    Default: ""
  MasterNodeUserData:
    Type: String
    Default: ""
  InfraNodeUserData:
    Type: String
    Default: ""
  AppNodeUserData:
    Type: String
    Default: ""
  BastionNodeInstanceType:
    Type: String
  MasterNodeInstanceType:
    Type: String
  InfraNodeInstanceType:
    Type: String
  AppNodeInstanceType:
    Type: String
  BastionNodeRootVolSize:
    Type: String
    Default: "10"
  MasterNodeRootVolSize:
    Type: String
    Default: "45"
  InfraNodeRootVolSize:
    Type: String
    Default: "45"
  AppNodeRootVolSize:
    Type: String
    Default: "45"
  DockerVolSize:
    Type: String
    Default: "20"
  DockerVolType:
    Type: String
    Default: gp2
  CnsVolSize:
    Type: String
    Default: "100"
  CnsVolType:
    Type: String
    Default: gp2

Conditions:
  CreateDhcpOpts: !Equals
    - !Ref Region
    - us-east-1

Resources:
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  VpcInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: {}

  VpcGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref VpcInternetGateway
      VpcId: !Ref Vpc

  VpcRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc

  VpcRouteTablePrivate:
    DependsOn:
      - VpcNatGateway
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc

  VPCRouteInternetGateway:
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId: !Ref VpcInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VpcRouteTable

  VpcEip:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  VpcRoute:
    DependsOn:
      - VpcNatGateway
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref VpcRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VpcNatGateway

  VpcSubnetPublic:
    Type: "AWS::EC2::Subnet"
    DependsOn:
      - Vpc
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref Vpc

  VpcSubnetPublicRTA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref VpcSubnetPublic

  VpcNatGateway:
    DependsOn:
      - VpcEip
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - VpcEip
        - AllocationId
      SubnetId: !Ref VpcSubnetPublic

  VpcDhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Condition: CreateDhcpOpts
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS

  VpcDhcpAssociateOptions:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Condition: CreateDhcpOpts
    Properties:
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref VpcDhcpOptions

  SecurityGroupBastion:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join
        - "-"
        - - !Ref ClusterName
          - bastion
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22

  SecurityGroupMaster:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join
        - "-"
        - - !Ref ClusterName
          - master
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - master
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443

  SecurityGroupInfra:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join
        - "-"
        - - !Ref ClusterName
          - infra
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - infra
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443

  SecurityGroupCluster:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join
        - "-"
        - - !Ref ClusterName
          - cluster
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - cluster

  SecurityGroupClusterIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: -1
      GroupId:
        !GetAtt
          - SecurityGroupCluster
          - GroupId
      SourceSecurityGroupId:
        !GetAtt
          - SecurityGroupCluster
          - GroupId

  MasterNodesElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - MasterNode01
      - MasterNode02
      - MasterNode03
    Properties:
      Instances:
        - !Ref MasterNode01
        - !Ref MasterNode02
        - !Ref MasterNode03
      Listeners:
        - LoadBalancerPort: 443
          Protocol: TCP
          InstancePort: 443
          InstanceProtocol: TCP
      HealthCheck:
        Target: TCP:443
        Interval: 10
        Timeout: 5
        HealthyThreshold: 2
        UnhealthyThreshold: 2
      Subnets:
        - !Ref VpcSubnetPublic
      SecurityGroups:
        - !Ref SecurityGroupMaster
        - !Ref SecurityGroupCluster
      ConnectionSettings:
        IdleTimeout: 300

  InfraNodesElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - InfraNode01
      - InfraNode02
      - InfraNode03
    Properties:
      Instances:
        - !Ref InfraNode01
        - !Ref InfraNode02
        - !Ref InfraNode03
      Listeners:
        - LoadBalancerPort: 80
          Protocol: TCP
          InstancePort: 80
          InstanceProtocol: TCP
        - LoadBalancerPort: 443
          Protocol: TCP
          InstancePort: 443
          InstanceProtocol: TCP
      HealthCheck:
        Target: TCP:80
        Interval: 10
        Timeout: 5
        HealthyThreshold: 2
        UnhealthyThreshold: 2
      Subnets:
        - !Ref VpcSubnetPublic
      SecurityGroups:
        - !Ref SecurityGroupInfra
        - !Ref SecurityGroupCluster
      ConnectionSettings:
        IdleTimeout: 300

  Route53Records:
    Type: "AWS::Route53::RecordSetGroup"
    DependsOn:
      - MasterNodesElb
      - InfraNodesElb
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      RecordSets:
        - Name: !Join
            - .
            - - !Ref ClusterName
              - !Ref Route53HostedZone
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MasterNodesElb.CanonicalHostedZoneNameID
            DNSName: !GetAtt MasterNodesElb.DNSName

        - Name: !Join
            - .
            - - '*'
              - apps
              - !Ref ClusterName
              - !Ref Route53HostedZone
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt InfraNodesElb.CanonicalHostedZoneNameID
            DNSName: !GetAtt InfraNodesElb.DNSName

  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref BastionNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref BastionNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupBastion
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - bastion
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: bastion
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref BastionNodeRootVolSize
            VolumeType: gp2

  MasterNode01:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref MasterNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref MasterNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupMaster
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - master01
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: master
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref MasterNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  MasterNode02:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref MasterNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref MasterNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupMaster
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - master02
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: master
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref MasterNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  MasterNode03:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref MasterNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref MasterNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupMaster
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - master03
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: master
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref MasterNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  InfraNode01:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref InfraNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref InfraNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupInfra
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - infra01
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: infra
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref InfraNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  InfraNode02:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref InfraNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref InfraNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupInfra
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - infra02
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: infra
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref InfraNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  InfraNode03:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref InfraNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref InfraNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
        - !GetAtt
          - SecurityGroupInfra
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - infra03
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: infra
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref InfraNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  AppNode01:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref AppNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref AppNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - app01
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: app
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref AppNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType

  AppNode02:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmiId
      UserData: !Ref AppNodeUserData
      KeyName: !Ref KeyName
      InstanceType: !Ref AppNodeInstanceType
      SecurityGroupIds:
        - !GetAtt
          - SecurityGroupCluster
          - GroupId
      SubnetId: !Ref VpcSubnetPublic
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref ClusterName
              - app02
        - Key: OpenShiftClusterName
          Value: !Ref ClusterName
        - Key: OpenShiftRole
          Value: app
        - Key: !Join
            - "/"
            - - kubernetes.io
              - cluster
              - !Ref ClusterName
          Value: !Ref ClusterName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref AppNodeRootVolSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref DockerVolSize
            VolumeType: !Ref DockerVolType
        - DeviceName: /dev/xvdc
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: !Ref CnsVolSize
            VolumeType: !Ref CnsVolType
